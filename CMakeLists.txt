cmake_minimum_required(VERSION 2.8.3)

option(BUILD_KOKKOS "Whether or not kokkos is build as an external project" OFF)

if(BUILD_KOKKOS)
  project(kokkos)
  include(cmake/buildExternal_Kokkos.cmake)
  return()
else()
  project(mandelbrot_kokkos_cmake CXX)
endif()
  

# default local cmake macro repository
set(CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake" ${CMAKE_MODULE_PATH})


#
# Init build type: Release, Debug, ...
#
include(${PROJECT_SOURCE_DIR}/cmake/initBuildType.cmake)

#
# Initialize CMAKE_MODULE_PATH for Kokkos
#
include(${PROJECT_SOURCE_DIR}/cmake/initKokkosModulePath.cmake)

# At this stage CMAKE_MODULE_PATH must have been populated
# with Kokkos installation path, so we can safely include kokkos.cmake
#
# kokkos.cmake contains Kokkos configuration
# we assume this file to be generated by kokkos itself
#
message (STATUS "Just printing CMAKE_MODULE_PATH " ${CMAKE_MODULE_PATH})
include(kokkos)

#
# common flags
#
if (KOKKOS_INTERNAL_USE_CUDA MATCHES "1")
  set(CMAKE_CXX_FLAGS  "${KOKKOS_CPPFLAGS} ${KOKKOS_CXXFLAGS} ${CMAKE_CXX_FLAGS} -DUSE_DOUBLE -DCUDA")
else()
  set(CMAKE_CXX_FLAGS  "${KOKKOS_CPPFLAGS} ${KOKKOS_CXXFLAGS} ${CMAKE_CXX_FLAGS} -DUSE_DOUBLE")
endif()
  
set(CMAKE_EXE_LINKER_FLAGS  "${KOKKOS_LDFLAGS} ${CMAKE_EXE_LINKER_FLAGS}")

#
# sources
#
add_subdirectory(src)
